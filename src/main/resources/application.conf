akka {
  log-dead-letters = 0
  logger-startup-timeout = 30s
  loglevel = DEBUG
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor.debug.fsm = true

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
    journal-plugin-fallback {
      replay-filter {
        mode = fail
      }
    }
    circuit-breaker {
      max-failures = 10
      call-timeout = 40s
      reset-timeout = 60s
    }
  }

  actor {
    serialize-messages = on # verify messages are serializable

    serializers {
      java = "akka.serialization.JavaSerializer"
      //event = "com.optrak.experimental.favouritesongs.ScalautilEventSerializer"
      persistentReprScalautil = "com.optrak.experimental.favouritesongs.PersistentReprSerializer"
    }

    serialization-bindings {
      //"com.optrak.experimental.favouritesongs.FavouritesListCommand" = event
      //"com.optrak.experimental.favouritesongs.AddSong" = event
      "akka.persistence.PersistentRepr" = persistentReprScalautil
      //"java.io.Serializable" = java
    }
  }
}

slick {
  # Use ANSI color sequences in tree dumps
  ansiDump = false

  # Use Unicode box characters in tree and table dumps
  unicodeDump = true

  # Dump individual Select and Ref nodes instead of a single Path
  dumpPaths = false

  # Use multi-line, indented formatting for SQL statements
  sqlIndent = true

  # Verify types after each query compiler phase
  verifyTypes = false

  # Detect unnecessary rebuilding of the AST after every query compiler phase
  detectRebuild = false

  driver = "slick.driver.PostgresDriver$"
  db {
    host = "localhost"
    port = "5432"
    name = "optrakbitest"

    url = "jdbc:postgresql://"${slick.db.host}":"${slick.db.port}"/"${slick.db.name}
    user = "optrakbi"
    password = "SecureDW13"
    driver = "org.postgresql.Driver"
    //keepAliveConnection = on
    numThreads = 4
    maxConnections = 2
    minConnections = 1
    //queueSize = 10000
    connectionTestQuery = "SELECT 1"
  }
}

jdbc-journal {
  slick = ${slick}
  tables.journal.schemaName = "current_favourites"

  // akka persistence can convert domain messages to messages specific for
  // the plugin, like eg. tagging an event
  //event-adapters {
  //  json = "com.optrak.experimental.favouritesongs.JsonEventAdapter"
  //}

  //event-adapter-bindings {
  //  "json4s.JValue" = json
  //  "com.optrak.experimental.favouritesongs.FavouritesListCommand" = json
  //}
}

jdbc-snapshot-store {
  slick = ${slick}
  tables.snapshot.schemaName = "current_favourites"
}